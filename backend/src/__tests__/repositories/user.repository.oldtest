// import { describe, beforeEach, afterEach, it } from "mocha";
// import { expect } from "chai";
// import sinon from "sinon";
// import mongoose from "mongoose";
// import { UserRepository } from "../../repositories/user.repository";
// import UserModel from "../../models/user.model";
// import { IUser } from "../../types";

// describe("UserRepository with stubInstance", () => {
//   let repo: UserRepository;
//   let FakeDocClass: any;
//   let docStub: sinon.SinonStubbedInstance<mongoose.Document & IUser>;

//   beforeEach(() => {
//     docStub = sinon.createStubInstance(UserModel) as any;
//     docStub.save.resolves(docStub);
//     docStub.$session.returnsThis();

//     FakeDocClass = function (this: any, data: Partial<IUser>) {
//       Object.assign(this, data);
//       return docStub;
//     };

//     // inject fake constructor
//     repo = new UserRepository(FakeDocClass);
//   });

//   it("create() uses stubInstance.save", async () => {
//     const u = await repo.create({ username: "u" });
//     expect(docStub.save.calledOnce).to.be.true;
//     expect(u).to.equal(docStub);
//   });
// });
