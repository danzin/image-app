services:
  mongo-setup:
    image: mongo:6
    container_name: mongo-setup
    command: >
      bash -c "
        echo 'Creating keyfile for MongoDB replica set...' &&
        openssl rand -base64 756 > /tmp/mongodb-keyfile &&
        chmod 400 /tmp/mongodb-keyfile &&
        cp /tmp/mongodb-keyfile /data/mongodb-keyfile &&
        chown 999:999 /data/mongodb-keyfile &&
        echo 'Keyfile created successfully!'
      "
    volumes:
      - mongo_keyfile:/data
    networks:
      - app-network

  mongo:
    image: mongo:6
    container_name: mongo
    restart: always
    ports:
      - "27017:27017"
    networks:
      - app-network
    volumes:
      - mongo_data:/data/db
      - mongo_keyfile:/opt/keyfile:ro
      - ./mongo-init.sh:/docker-entrypoint-initdb.d/mongo-init.sh:ro
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: secret
    command: >
      mongod --bind_ip_all --replSet rs0 --keyFile /opt/keyfile/mongodb-keyfile --auth
    depends_on:
      - mongo-setup
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "try { rs.status().ok } catch(err) { rs.initiate({_id:'rs0', members: [{_id:0, host:'mongo:27017'}]}).ok }", "-u", "root", "-p", "secret", "--authenticationDatabase", "admin", "--quiet"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s

  redis:
    image: redis:alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  backend:
    build:
      context: .
      dockerfile: backend/backend.Dockerfile
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      MONGODB_URI: mongodb://root:secret@mongo:27017/image-app?authSource=admin&replicaSet=rs0
      VITE_API_URL: 'http://localhost:8000'
      VITE_SOCKET_URL: 'http://localhost:3000'
      FRONTEND_URL: http://localhost:5173
      JWT_SECRET: JyPrAXNdGvxbWwm59KUeyiPZXqxlyC6Y
      ALLOWED_ORIGINS: http://localhost,http://localhost:80,http://localhost:5173,http://localhost:8000
      COOKIE_SECURE: "false"
    depends_on:
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
    volumes:
      - ./backend/uploads:/app/backend/uploads
    healthcheck:
      test: ["CMD", "sh", "-c", "wget --no-verbose --tries=1 --spider http://localhost:3000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  api-gateway:
    build:
      context: .
      dockerfile: api-gateway/gateway.Dockerfile
    container_name: api-gateway
    ports:
      - "8000:8000"
    environment:
      NODE_ENV: production
      PORT: 8000
      BACKEND_MONOLITH_URL: http://backend:3000/
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "sh", "-c", "wget --no-verbose --tries=1 --spider http://localhost:8000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  frontend:
    build:
      context: .
      dockerfile: frontend/frontend.Dockerfile
      args:
        VITE_API_URL: http://localhost:8000
        VITE_SOCKET_URL: http://localhost:3000

    ports:
      - "80:80"
    depends_on:
      api-gateway:
        condition: service_healthy
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  redis_data:
  mongo_data:
  mongo_keyfile: