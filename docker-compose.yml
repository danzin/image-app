services:
  # Generate a keyfile for the mongodb replica set internal authentication
  # sets chmod 400 on the keyfile and chown 999:999 so the mongod process can read it securely
  # store it in named volume
  mongo-setup:
    image: mongo:6
    container_name: mongo-setup
    command: >
      bash -c "
        echo 'Creating keyfile for MongoDB replica set...' &&
        openssl rand -base64 756 > /tmp/mongodb-keyfile &&
        chmod 400 /tmp/mongodb-keyfile &&
        cp /tmp/mongodb-keyfile /data/mongodb-keyfile &&
        chown 999:999 /data/mongodb-keyfile &&
        echo 'Keyfile created successfully!'
      "
    volumes:
      - mongo_keyfile:/data
    networks:
      - app-network

  # Start mongod with --replSet rs0 and --keyfile [location]
  # at this point the replica set is uninitialized until rs.initiate is called

  mongo:
    image: mongo:6
    container_name: mongo
    restart: always
    ports:
      - "27017:27017"
    networks:
      - app-network
    volumes:
      - mongo_data:/data/db
      - mongo_keyfile:/opt/keyfile:ro
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: secret
    command: ["mongod", "--replSet", "rs0", "--keyFile", "/opt/keyfile/mongodb-keyfile", "--bind_ip_all"]
    depends_on:
      - mongo-setup
    healthcheck:
      # Read-only healthcheck: succeed if PRIMARY (1) or SECONDARY (2) or ARBITER (7)
      test: >
        mongosh --host mongo -u root -p secret --authenticationDatabase admin --quiet --eval "
          try {
            const st = rs.status();
            if ([1,2,7].includes(st.myState)) { quit(0); } else { quit(1); }
          } catch (e) { quit(1); }
        "
      interval: 10s
      timeout: 5s
      retries: 15
      start_period: 90s

  # One-shot sidecar to initialize the replica set AFTER mongod starts with --replSet
  # depends only on mongo container existing
  # calls rs.initiate({_id:"rs0", members: [{_id:0, host:"mongo:27017"}]}) from the init script
  # waits until myState == 1 PRIMARY
  mongo-rs-init:
    image: mongo:6
    container_name: mongo-rs-init
    depends_on:
      - mongo
    networks:
      - app-network
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: secret
      MONGO_HOST: mongo
    volumes:
      - ./mongo-rs-init.sh:/rs-init/mongo-rs-init.sh:ro
    entrypoint: ["bash", "/rs-init/mongo-rs-init.sh"]
    restart: "no"

  redis:
    image: redis:alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  backend:
    build:
      context: .
      dockerfile: backend/backend.Dockerfile
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      MONGODB_URI: mongodb://root:secret@mongo:27017/image-app?authSource=admin&replicaSet=rs0
      VITE_API_URL: "http://localhost:8000"
      VITE_SOCKET_URL: "http://localhost:3000"
      FRONTEND_URL: http://localhost:5173
      JWT_SECRET: JyPrAXNdGvxbWwm59KUeyiPZXqxlyC6Y
      ALLOWED_ORIGINS: http://localhost,http://localhost:80,http://localhost:5173,http://localhost:8000
      COOKIE_SECURE: "false"
    depends_on:
      mongo:
        condition: service_healthy
      mongo-rs-init:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
    networks:
      - app-network
    volumes:
      - ./backend/uploads:/app/backend/uploads
    healthcheck:
      test: ["CMD", "sh", "-c", "wget --no-verbose --tries=1 --spider http://localhost:3000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
  api-gateway:
    build:
      context: .
      dockerfile: api-gateway/gateway.Dockerfile
    container_name: api-gateway
    ports:
      - "8000:8000"
    environment:
      NODE_ENV: production
      PORT: 8000
      BACKEND_MONOLITH_URL: http://backend:3000/
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "sh", "-c", "wget --no-verbose --tries=1 --spider http://localhost:8000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  frontend:
    build:
      context: .
      dockerfile: frontend/frontend.Dockerfile
      args:
        VITE_API_URL: http://localhost:8000
        VITE_SOCKET_URL: http://localhost:8000

    ports:
      - "80:80"
    depends_on:
      api-gateway:
        condition: service_healthy
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  redis_data:
  mongo_data:
  mongo_keyfile:
